3.1.15 (Brainy Betty)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:@has_childrenT:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:
@linei:@options{ :@children[io:Sass::Tree::ImportNode
;0;i;	@:@imported_filename"shared;
[ o:Sass::Tree::CommentNode:@value["/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */;i:
@loud0;	@;
[ :@silenti o;;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;i;0;	@;
[ ;i o;;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;i;0;	@;
[ ;i o;;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;i ;0;	@;
[ ;i o;;["a/* Defaults ------------------------------------------------------------------
 * @doc on */;i4;0;	@;
[ ;i o;;["./* The default x-origin for transforms */;i7;0;	@;
[ ;i o:Sass::Tree::VariableNode:
@name"default-origin-x;i8;	@:@guarded"!default;
[ :
@expro:Sass::Script::Number:@original"50%:@denominator_units[ ;i7;i8;	@:@numerator_units["%o;;["./* The default y-origin for transforms */;i9;0;	@;
[ ;i o;;"default-origin-y;i:;	@;"!default;
[ ;o;;"50%;[ ;i7;i:;	@;["%o;;["./* The default z-origin for transforms */;i;;0;	@;
[ ;i o;;"default-origin-z;i<;	@;"!default;
[ ;o;;"50%;[ ;i7;i<;	@;["%o;;["//* The default x-multiplier for scaling */;i?;0;	@;
[ ;i o;;"default-scale-x;i@;	@;"!default;
[ ;o;;"	1.25;[ ;f	1.25;i@;	@;[ o;;["//* The default y-multiplier for scaling */;iA;0;	@;
[ ;i o;;"default-scale-y;iB;	@;"!default;
[ ;o:Sass::Script::Variable	;"default-scale-x;iB;	@:@underscored_name"default_scale_xo;;["//* The default z-multiplier for scaling */;iC;0;	@;
[ ;i o;;"default-scale-z;iD;	@;"!default;
[ ;o;	;"default-scale-x;iD;	@;"default_scale_xo;;["*/* The default angle for rotations */;iG;0;	@;
[ ;i o;;"default-rotate;iH;	@;"!default;
[ ;o;;"
45deg;[ ;i2;iH;	@;["dego;;["</* The default x-vector for the axis of 3d rotations */;iK;0;	@;
[ ;i o;;"default-vector-x;iL;	@;"!default;
[ ;o;;"1;@Q;i;iL;	@;[ o;;["</* The default y-vector for the axis of 3d rotations */;iM;0;	@;
[ ;i o;;"default-vector-y;iN;	@;"!default;
[ ;o;;"1;@Q;i;iN;	@;[ o;;["</* The default z-vector for the axis of 3d rotations */;iO;0;	@;
[ ;i o;;"default-vector-z;iP;	@;"!default;
[ ;o;;"1;@Q;i;iP;	@;[ o;;["0/* The default x-length for translations */;iS;0;	@;
[ ;i o;;"default-translate-x;iT;	@;"!default;
[ ;o;;"1em;[ ;i;iT;	@;["emo;;["0/* The default y-length for translations */;iU;0;	@;
[ ;i o;;"default-translate-y;iV;	@;"!default;
[ ;o;	;"default-translate-x;iV;	@;"default_translate_xo;;["0/* The default z-length for translations */;iW;0;	@;
[ ;i o;;"default-translate-z;iX;	@;"!default;
[ ;o;	;"default-translate-x;iX;	@;"default_translate_xo;;["*/* The default x-angle for skewing */;i[;0;	@;
[ ;i o;;"default-skew-x;i\;	@;"!default;
[ ;o;;"	5deg;[ ;i
;i\;	@;["dego;;["*/* The default y-angle for skewing */;i];0;	@;
[ ;i o;;"default-skew-y;i^;	@;"!default;
[ ;o;;"	5deg;[ ;i
;i^;	@;["dego;;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;ia;0;	@;
[ ;i o:Sass::Tree::MixinDefNode;T;"apply-origin;il;	@;
[o;;"only3d;im;	@;0;
[ ;o:Sass::Script::Operation
:@operator:or;im;	@:@operand2o;
;:gt;im;	@;o;;"2;@Q;i;im;	@;[ :@operand1o:Sass::Script::Funcall
;"-compass-list-size:@keywords{ ;im;	@:
@args[o;"
;"-compass-list;#{ ;im;	@;$[o;	;"origin;im;	@;"origin;!o;	;"only3d;im;	@;"only3du:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@name"only3d:
@linein:@options{ :@underscored_name"only3du:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@name"experimental:@keywords{ :
@lineiu:@options{ :@children[ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform-origin;is;	@
o:Sass::Script::Variable	;"origin;is;	@
:@underscored_name"origino;	;;;"	-moz;it;	@
o;	;;;"-webkit;it;	@
o;	;;;"-o;it;	@
o;	;;;"-ms;it;	@
o:!Sass::Script::UnaryOperation	:@operator:not;it;	@
:@operando;	;;;"-khtml;it;	@
o;	;;;"official;it;	@
[o:Sass::Tree::MixinNode;"experimental:@keywords{ ;iq;@:@children[ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform-origin;io;@o; 	;"origin;io;@;	"origino:!Sass::Script::UnaryOperation	:@operator:not;ip;@:@operando;	;;;"	-moz;ip;@o;	;;;"-webkit;ip;@o;	;;;ip;@;o;	;;;"-o;ip;@o;	;;;ip;@;o;	;;;"-ms;ip;@o;	;;;ip;@;o;	;;;"-khtml;ip;@o;	;;;"official;ip;@;$[[o;;"origin;	@;"origin0[o;;"only3d;	@;"only3d0o;;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;iy;0;	@;
[ ;i o;;T;"transform-origin;i;	@;
[o;;"origin;i;	@;0;
[ ;o;"
;"unquote;#{ ;i;	@;$[o:Sass::Script::String	:
@type:string;" ;i;	@u;%[o:Sass::Script::Operation
:@operator:or:
@linei:@options{ :@operand2o:Sass::Script::Variable	:
@name"origin-z;i;	@:@underscored_name"origin_z:@operand1o; 
;;;i;	@;
o;	;"origin-y;i;	@;"origin_y;o;	;"origin-x;i;	@;"origin_x0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@name"origin-x:
@linei:@options{ :@underscored_name"origin_xu:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:
@name"origin:
@linei:@options{ :@guarded0:@children[ :
@expro:Sass::Script::Number:@original"50%:@denominator_units[ :@valuei7;i;@	:@numerator_units["%[o:Sass::Tree::VariableNode;"origin;i;@:@guarded0:@children[ :
@expro; 	;"origin-x;i;@;	"origin_xu;Þ[o:Sass::Script::Variable	:
@name"origin-y:
@linei:@options{ :@underscored_name"origin_yu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@name"origin-z:
@linei:@options{ :@underscored_name"origin_z0[o:Sass::Tree::VariableNode;"origin;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"origin;i;@;	"origino:Sass::Script::Number:@original"50%:@denominator_units[ ;i7;i;@:@numerator_units["%;i;@:@separator:
space[o:Sass::Tree::VariableNode;"origin;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"origin;i;@;	"origino; 	;"origin-y;i;@;	"origin_y;i;@:@separator:
spaceu;5[o:Sass::Script::Variable	:
@name"origin-z:
@linei:@options{ :@underscored_name"origin_z0[o:Sass::Tree::VariableNode;"origin;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"origin;i;@;	"origino; 	;"origin-z;i;@;	"origin_z;i;@:@separator:
spaceo:Sass::Tree::MixinNode;"apply-origin:@keywords{ ;i;	@:@children[ :
@args[o;	;"origin;i;	@;"origino;	;"only3d;i;	@;"only3d;$[	[o;;"origin-x;	@;"origin_xo;	;"default-origin-x;i|;	@;"default_origin_x[o;;"origin-y;	@;"origin_yo;	;"default-origin-y;i};	@;"default_origin_y[o;;"origin-z;	@;"origin_zo:Sass::Script::Bool;F;i~;	@[o;;"only3d;	@;"only3do;"
;"if;#{ ;i;	@;$[o;	;"origin-z;i;	@;"origin_zo;);T;i;	@o;);F;i;	@o;;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;i;0;	@;
[ ;i o;;T;"transform;i;	@;
[u;%6[o:Sass::Script::Variable	:
@name"only3d:
@linei:@options{ :@underscored_name"only3du:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@name"experimental:@keywords{ :
@linei:@options{ :@children[ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform;i;	@
o:Sass::Script::Variable	;"transform;i;	@
:@underscored_name"transformo;	;;;"	-moz;i;	@
o;	;;;"-webkit;i;	@
o;	;;;"-o;i;	@
o;	;;;"-ms;i;	@
o:!Sass::Script::UnaryOperation	:@operator:not;i;	@
:@operando;	;;;"-khtml;i;	@
o;	;;;"official;i;	@
[o:Sass::Tree::MixinNode;"experimental:@keywords{ ;i;@:@children[ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform;i;@o; 	;"transform;i;@;	"transformo:!Sass::Script::UnaryOperation	:@operator:not;i;@:@operando;	;;;"	-moz;i;@o;	;;;"-webkit;i;@o;	;;;i;@;o;	;;;"-o;i;@o;	;;;i;@;o;	;;;"-ms;i;@o;	;;;i;@;o;	;;;"-khtml;i;@o;	;;;"official;i;@;$[[o;;"transform;	@;"transform0[o;;"only3d;	@;"only3do;);F;i;	@o;;["D/* Shortcut to target all browsers with 2D transform support */;i;0;	@;
[ ;i o;;T;"transform2d;i ;	@;
[o:Sass::Tree::MixinNode;"transform;#{ ;i¡;	@;
[ ;$[o;	;"
trans;i¡;	@;"
transo;);F;i¡;	@;$[[o;;"
trans;	@;"
trans0o;;["E/* Shortcut to target only browsers with 3D transform support */;i¤;0;	@;
[ ;i o;;T;"transform3d;i¥;	@;
[o;*;"transform;#{ ;i¦;	@;
[ ;$[o;	;"
trans;i¦;	@;"
transo;);T;i¦;	@;$[[o;;"
trans;	@;"
trans0o;;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;i©;0;	@;
[ ;i o;;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;i­;0;	@;
[ ;i o;;T;"perspective;i´;	@;
[o;*;"experimental;#{ ;i·;	@;
[ ;$[o;&	;':identifier;"perspective;iµ;	@o;	;"p;iµ;	@;"po:!Sass::Script::UnaryOperation	;:not;i¶;	@:@operando;&	;';+;"	-moz;i¶;	@o;&	;';+;"-webkit;i¶;	@o;,	;;-;i¶;	@;.o;&	;';+;"-o;i¶;	@o;,	;;-;i¶;	@;.o;&	;';+;"-ms;i¶;	@o;,	;;-;i¶;	@;.o;&	;';+;"-khtml;i¶;	@o;&	;';+;"official;i¶;	@;$[[o;;"p;	@;"p0o;;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;iº;0;	@;
[ ;i o;;T;"perspective-origin;i¿;	@;
[o;*;"experimental;#{ ;iÂ;	@;
[ ;$[o;&	;';+;"perspective-origin;iÀ;	@o;	;"origin;iÀ;	@;"origino;,	;;-;iÁ;	@;.o;&	;';+;"	-moz;iÁ;	@o;&	;';+;"-webkit;iÁ;	@o;,	;;-;iÁ;	@;.o;&	;';+;"-o;iÁ;	@o;,	;;-;iÁ;	@;.o;&	;';+;"-ms;iÁ;	@o;,	;;-;iÁ;	@;.o;&	;';+;"-khtml;iÁ;	@o;&	;';+;"official;iÁ;	@;$[[o;;"origin;	@;"origino;;"50%;[ ;i7;i¿;	@;["%o;;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;iÅ;0;	@;
[ ;i o;;T;"transform-style;iË;	@;
[o;*;"experimental;#{ ;iÎ;	@;
[ ;$[o;&	;';+;"transform-style;iÌ;	@o;	;"
style;iÌ;	@;"
styleo;,	;;-;iÍ;	@;.o;&	;';+;"	-moz;iÍ;	@o;&	;';+;"-webkit;iÍ;	@o;,	;;-;iÍ;	@;.o;&	;';+;"-o;iÍ;	@o;,	;;-;iÍ;	@;.o;&	;';+;"-ms;iÍ;	@o;,	;;-;iÍ;	@;.o;&	;';+;"-khtml;iÍ;	@o;&	;';+;"official;iÍ;	@;$[[o;;"
style;	@;"
styleo;&	;';+;"preserve-3d;iË;	@o;;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;iÑ;0;	@;
[ ;i o;;T;"backface-visibility;i×;	@;
[o;*;"experimental;#{ ;iÚ;	@;
[ ;$[o;&	;';+;"backface-visibility;iØ;	@o;	;"visibility;iØ;	@;"visibilityo;,	;;-;iÙ;	@;.o;&	;';+;"	-moz;iÙ;	@o;&	;';+;"-webkit;iÙ;	@o;,	;;-;iÙ;	@;.o;&	;';+;"-o;iÙ;	@o;,	;;-;iÙ;	@;.o;&	;';+;"-ms;iÙ;	@o;,	;;-;iÙ;	@;.o;&	;';+;"-khtml;iÙ;	@o;&	;';+;"official;iÙ;	@;$[[o;;"visibility;	@;"visibilityo;&	;';+;"hidden;i×;	@o;;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;iÝ;0;	@;
[ ;i o;;["a/* Scale ---------------------------------------------------------------------
 * @doc on */;iä;0;	@;
[ ;i o;;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iç;0;	@;
[ ;i o;;T;"
scale;iõ;	@;
[o;;"
trans;iö;	@;0;
[ ;o;"
;"
scale;#{ ;iö;	@;$[o;	;"scale-x;iö;	@;"scale_xo;	;"scale-y;iö;	@;"scale_yu;%[o:Sass::Script::Variable	:
@name"perspective:
@linei÷:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;i÷;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;i÷;@:
@args[o; 	;"perspective;i÷;@;	"perspectiveo; 	;"
trans;i÷;@;	"
trans;i÷;@:@separator:
spaceo;*;"transform;#{ ;iø;	@;
[ ;$[o;	;"
trans;iø;	@;"
transo;	;"only3d;iø;	@;"only3d;$[	[o;;"scale-x;	@;"scale_xo;	;"default-scale-x;iñ;	@;"default_scale_x[o;;"scale-y;	@;"scale_yo;	;"scale-x;iò;	@;"scale_x[o;;"perspective;	@;"perspectiveo;);F;ió;	@[o;;"only3d;	@;"only3do;);F;iô;	@o;;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iû;0;	@;
[ ;i o;;T;"scaleX;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;"
;"scaleX;#{ ;i;	@;$[o;	;"
scale;i;	@;"
scaleu;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;i;@:
@args[o; 	;"perspective;i;@;	"perspectiveo; 	;"
trans;i;@;	"
trans;i;@:@separator:
spaceo;*;"transform;#{ ;i;	@;
[ ;$[o;	;"
trans;i;	@;"
transo;	;"only3d;i;	@;"only3d;$[[o;;"
scale;	@;"
scaleo;	;"default-scale-x;i ;	@;"default_scale_x[o;;"perspective;	@;"perspectiveo;);F;i;	@[o;;"only3d;	@;"only3do;);F;i;	@o;;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i	;0;	@;
[ ;i o;;T;"scaleY;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;"
;"scaleY;#{ ;i;	@;$[o;	;"
scale;i;	@;"
scaleu;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;i;@:
@args[o; 	;"perspective;i;@;	"perspectiveo; 	;"
trans;i;@;	"
trans;i;@:@separator:
spaceo;*;"transform;#{ ;i;	@;
[ ;$[o;	;"
trans;i;	@;"
transo;	;"only3d;i;	@;"only3d;$[[o;;"
scale;	@;"
scaleo;	;"default-scale-y;i;	@;"default_scale_y[o;;"perspective;	@;"perspectiveo;);F;i;	@[o;;"only3d;	@;"only3do;);F;i;	@o;;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;0;	@;
[ ;i o;;T;"scaleZ;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;"
;"scaleZ;#{ ;i;	@;$[o;	;"
scale;i;	@;"
scaleu;%[o:Sass::Script::Variable	:
@name"perspective:
@linei :@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;i ;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;i ;@:
@args[o; 	;"perspective;i ;@;	"perspectiveo; 	;"
trans;i ;@;	"
trans;i ;@:@separator:
spaceo;*;"transform3d;#{ ;i!;	@;
[ ;$[o;	;"
trans;i!;	@;"
trans;$[[o;;"
scale;	@;"
scaleo;	;"default-scale-z;i;	@;"default_scale_z[o;;"perspective;	@;"perspectiveo;);F;i;	@o;;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i$;0;	@;
[ ;i o;;T;"scale3d;i-;	@;
[o;;"
trans;i.;	@;0;
[ ;o;"
;"scale3d;#{ ;i.;	@;$[o;	;"scale-x;i.;	@;"scale_xo;	;"scale-y;i.;	@;"scale_yo;	;"scale-z;i.;	@;"scale_zu;%[o:Sass::Script::Variable	:
@name"perspective:
@linei/:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;i/;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;i/;@:
@args[o; 	;"perspective;i/;@;	"perspectiveo; 	;"
trans;i/;@;	"
trans;i/;@:@separator:
spaceo;*;"transform3d;#{ ;i0;	@;
[ ;$[o;	;"
trans;i0;	@;"
trans;$[	[o;;"scale-x;	@;"scale_xo;	;"default-scale-x;i);	@;"default_scale_x[o;;"scale-y;	@;"scale_yo;	;"default-scale-y;i*;	@;"default_scale_y[o;;"scale-z;	@;"scale_zo;	;"default-scale-z;i+;	@;"default_scale_z[o;;"perspective;	@;"perspectiveo;);F;i,;	@o;;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;i3;0;	@;
[ ;i o;;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i7;0;	@;
[ ;i o;;T;"rotate;i@;	@;
[o;;"
trans;iA;	@;0;
[ ;o;"
;"rotate;#{ ;iA;	@;$[o;	;"rotate;iA;	@;"rotateu;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiB:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;iB;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;iB;@:
@args[o; 	;"perspective;iB;@;	"perspectiveo; 	;"
trans;iB;@;	"
trans;iB;@:@separator:
spaceo;*;"transform;#{ ;iC;	@;
[ ;$[o;	;"
trans;iC;	@;"
transo;	;"only3d;iC;	@;"only3d;$[[o;;"rotate;	@;"rotateo;	;"default-rotate;i=;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;);F;i>;	@[o;;"only3d;	@;"only3do;);F;i?;	@o;;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iF;0;	@;
[ ;i o;;T;"rotateZ;iM;	@;
[o;*;"rotate;#{ ;iN;	@;
[ ;$[o;	;"rotate;iN;	@;"rotateo;	;"perspective;iN;	@;"perspectiveo;	;"only3d;iN;	@;"only3d;$[[o;;"rotate;	@;"rotateo;	;"default-rotate;iJ;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;);F;iK;	@[o;;"only3d;	@;"only3do;);F;iL;	@o;;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iQ;0;	@;
[ ;i o;;T;"rotateX;iX;	@;
[o;;"
trans;iY;	@;0;
[ ;o;"
;"rotateX;#{ ;iY;	@;$[o;	;"rotate;iY;	@;"rotateu;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiZ:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;iZ;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;iZ;@:
@args[o; 	;"perspective;iZ;@;	"perspectiveo; 	;"
trans;iZ;@;	"
trans;iZ;@:@separator:
spaceo;*;"transform3d;#{ ;i[;	@;
[ ;$[o;	;"
trans;i[;	@;"
trans;$[[o;;"rotate;	@;"rotateo;	;"default-rotate;iV;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;);F;iW;	@o;;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i^;0;	@;
[ ;i o;;T;"rotateY;ie;	@;
[o;;"
trans;if;	@;0;
[ ;o;"
;"rotateY;#{ ;if;	@;$[o;	;"rotate;if;	@;"rotateu;%[o:Sass::Script::Variable	:
@name"perspective:
@lineig:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;ig;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;ig;@:
@args[o; 	;"perspective;ig;@;	"perspectiveo; 	;"
trans;ig;@;	"
trans;ig;@:@separator:
spaceo;*;"transform3d;#{ ;ih;	@;
[ ;$[o;	;"
trans;ih;	@;"
trans;$[[o;;"rotate;	@;"rotateo;	;"default-rotate;ic;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;);F;id;	@o;;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ik;0;	@;
[ ;i o;;T;"rotate3d;ix;	@;
[o;;"
trans;iy;	@;0;
[ ;o;"
;"rotate3d;#{ ;iy;	@;$[	o;	;"vector-x;iy;	@;"vector_xo;	;"vector-y;iy;	@;"vector_yo;	;"vector-z;iy;	@;"vector_zo;	;"rotate;iy;	@;"rotateu;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiz:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;iz;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;iz;@:
@args[o; 	;"perspective;iz;@;	"perspectiveo; 	;"
trans;iz;@;	"
trans;iz;@:@separator:
spaceo;*;"transform3d;#{ ;i{;	@;
[ ;$[o;	;"
trans;i{;	@;"
trans;$[
[o;;"vector-x;	@;"vector_xo;	;"default-vector-x;is;	@;"default_vector_x[o;;"vector-y;	@;"vector_yo;	;"default-vector-y;it;	@;"default_vector_y[o;;"vector-z;	@;"vector_zo;	;"default-vector-z;iu;	@;"default_vector_z[o;;"rotate;	@;"rotateo;	;"default-rotate;iv;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;);F;iw;	@o;;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;i~;0;	@;
[ ;i o;;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;0;	@;
[ ;i o;;T;"translate;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;"
;"translate;#{ ;i;	@;$[o;	;"translate-x;i;	@;"translate_xo;	;"translate-y;i;	@;"translate_yu;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;i;@:
@args[o; 	;"perspective;i;@;	"perspectiveo; 	;"
trans;i;@;	"
trans;i;@:@separator:
spaceo;*;"transform;#{ ;i;	@;
[ ;$[o;	;"
trans;i;	@;"
transo;	;"only3d;i;	@;"only3d;$[	[o;;"translate-x;	@;"translate_xo;	;"default-translate-x;i;	@;"default_translate_x[o;;"translate-y;	@;"translate_yo;	;"default-translate-y;i;	@;"default_translate_y[o;;"perspective;	@;"perspectiveo;);F;i;	@[o;;"only3d;	@;"only3do;);F;i;	@o;;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;0;	@;
[ ;i o;;T;"translateX;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;"
;"translateX;#{ ;i;	@;$[o;	;"trans-x;i;	@;"trans_xu;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;i;@:
@args[o; 	;"perspective;i;@;	"perspectiveo; 	;"
trans;i;@;	"
trans;i;@:@separator:
spaceo;*;"transform;#{ ;i;	@;
[ ;$[o;	;"
trans;i;	@;"
transo;	;"only3d;i;	@;"only3d;$[[o;;"trans-x;	@;"trans_xo;	;"default-translate-x;i;	@;"default_translate_x[o;;"perspective;	@;"perspectiveo;);F;i;	@[o;;"only3d;	@;"only3do;);F;i;	@o;;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;0;	@;
[ ;i o;;T;"translateY;i¨;	@;
[o;;"
trans;i©;	@;0;
[ ;o;"
;"translateY;#{ ;i©;	@;$[o;	;"trans-y;i©;	@;"trans_yu;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiª:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;iª;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;iª;@:
@args[o; 	;"perspective;iª;@;	"perspectiveo; 	;"
trans;iª;@;	"
trans;iª;@:@separator:
spaceo;*;"transform;#{ ;i«;	@;
[ ;$[o;	;"
trans;i«;	@;"
transo;	;"only3d;i«;	@;"only3d;$[[o;;"trans-y;	@;"trans_yo;	;"default-translate-y;i¥;	@;"default_translate_y[o;;"perspective;	@;"perspectiveo;);F;i¦;	@[o;;"only3d;	@;"only3do;);F;i§;	@o;;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i®;0;	@;
[ ;i o;;T;"translateZ;iµ;	@;
[o;;"
trans;i¶;	@;0;
[ ;o;"
;"translateZ;#{ ;i¶;	@;$[o;	;"trans-z;i¶;	@;"trans_zu;%[o:Sass::Script::Variable	:
@name"perspective:
@linei·:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;i·;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;i·;@:
@args[o; 	;"perspective;i·;@;	"perspectiveo; 	;"
trans;i·;@;	"
trans;i·;@:@separator:
spaceo;*;"transform3d;#{ ;i¸;	@;
[ ;$[o;	;"
trans;i¸;	@;"
trans;$[[o;;"trans-z;	@;"trans_zo;	;"default-translate-z;i³;	@;"default_translate_z[o;;"perspective;	@;"perspectiveo;);F;i´;	@o;;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i»;0;	@;
[ ;i o;;T;"translate3d;iÄ;	@;
[o;;"
trans;iÅ;	@;0;
[ ;o;"
;"translate3d;#{ ;iÅ;	@;$[o;	;"translate-x;iÅ;	@;"translate_xo;	;"translate-y;iÅ;	@;"translate_yo;	;"translate-z;iÅ;	@;"translate_zu;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiÆ:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;iÆ;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;iÆ;@:
@args[o; 	;"perspective;iÆ;@;	"perspectiveo; 	;"
trans;iÆ;@;	"
trans;iÆ;@:@separator:
spaceo;*;"transform3d;#{ ;iÇ;	@;
[ ;$[o;	;"
trans;iÇ;	@;"
trans;$[	[o;;"translate-x;	@;"translate_xo;	;"default-translate-x;iÀ;	@;"default_translate_x[o;;"translate-y;	@;"translate_yo;	;"default-translate-y;iÁ;	@;"default_translate_y[o;;"translate-z;	@;"translate_zo;	;"default-translate-z;iÂ;	@;"default_translate_z[o;;"perspective;	@;"perspectiveo;);F;iÃ;	@o;;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;iÊ;0;	@;
[ ;i o;;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÎ;0;	@;
[ ;i o;;T;"	skew;iÙ;	@;
[o;;"
trans;iÚ;	@;0;
[ ;o;"
;"	skew;#{ ;iÚ;	@;$[o;	;"skew-x;iÚ;	@;"skew_xo;	;"skew-y;iÚ;	@;"skew_yo;*;"transform;#{ ;iÛ;	@;
[ ;$[o;	;"
trans;iÛ;	@;"
transo;	;"only3d;iÛ;	@;"only3d;$[[o;;"skew-x;	@;"skew_xo;	;"default-skew-x;iÖ;	@;"default_skew_x[o;;"skew-y;	@;"skew_yo;	;"default-skew-y;i×;	@;"default_skew_y[o;;"only3d;	@;"only3do;);F;iØ;	@o;;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÞ;0;	@;
[ ;i o;;T;"
skewX;iæ;	@;
[o;;"
trans;iç;	@;0;
[ ;o;"
;"
skewX;#{ ;iç;	@;$[o;	;"skew-x;iç;	@;"skew_xo;*;"transform;#{ ;iè;	@;
[ ;$[o;	;"
trans;iè;	@;"
transo;	;"only3d;iè;	@;"only3d;$[[o;;"skew-x;	@;"skew_xo;	;"default-skew-x;iä;	@;"default_skew_x[o;;"only3d;	@;"only3do;);F;iå;	@o;;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ië;0;	@;
[ ;i o;;T;"
skewY;ió;	@;
[o;;"
trans;iô;	@;0;
[ ;o;"
;"
skewY;#{ ;iô;	@;$[o;	;"skew-y;iô;	@;"skew_yo;*;"transform;#{ ;iõ;	@;
[ ;$[o;	;"
trans;iõ;	@;"
transo;	;"only3d;iõ;	@;"only3d;$[[o;;"skew-y;	@;"skew_yo;	;"default-skew-y;iñ;	@;"default_skew_y[o;;"only3d;	@;"only3do;);F;iò;	@o;;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iù;0;	@;
[ ;i o;;T;"create-transform;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;"
;"unquote;#{ ;i;	@;$[o;&	;';(;" ;i;	@o;;["/* perspective */;i;0;	@;
[ ;i u;%.[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode;"
trans;i;@:@guarded0:@children[ :
@expro:Sass::Script::Funcall
;"perspective:@keywords{ ;i;@:
@args[o; 	;"perspective;i;@;	"perspectiveo;;["/* scale */;i;0;	@;
[ ;i u;%Ê[o:Sass::Script::Operation
:@operator:and:
@linei:@options{ :@operand2o:Sass::Script::Variable	:
@name"scale-y;i;	@:@underscored_name"scale_y:@operand1o;	;"scale-x;i;	@;"scale_xu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@name"scale-x:
@linei:@options{ :@underscored_name"scale_x0[o:Sass::Tree::VariableNode;"
trans;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i;@;	"
transo:Sass::Script::Funcall
;"scaleX:@keywords{ ;i;@:
@args[o; 	;"scale-x;i;@;	"scale_x;i;@:@separator:
spaceu; v[o:Sass::Script::Variable	:
@name"scale-y:
@linei :@options{ :@underscored_name"scale_y0[o:Sass::Tree::VariableNode;"
trans;i ;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i ;@;	"
transo:Sass::Script::Funcall
;"scaleY:@keywords{ ;i ;@:
@args[o; 	;"scale-y;i ;@;	"scale_y;i ;@:@separator:
spaceu; v[o:Sass::Script::Variable	:
@name"scale-z:
@linei!:@options{ :@underscored_name"scale_z0[o:Sass::Tree::VariableNode;"
trans;i!;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i!;@;	"
transo:Sass::Script::Funcall
;"scaleZ:@keywords{ ;i!;@:
@args[o; 	;"scale-z;i!;@;	"scale_z;i!;@:@separator:
space[u;L[o:Sass::Script::Variable	:
@name"scale-z:
@linei:@options{ :@underscored_name"scale_zu:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:
@name"
trans:
@linei:@options{ :@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	;"
trans;i;@	:@underscored_name"
transo:Sass::Script::Funcall
;"
scale:@keywords{ ;i;@	:
@args[o;	;"scale-x;i;@	;"scale_xo;	;"scale-y;i;@	;"scale_y;i;@	:@separator:
space[o:Sass::Tree::VariableNode;"
trans;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i;@;	"
transo:Sass::Script::Funcall
;"scale3d:@keywords{ ;i;@:
@args[o; 	;"scale-x;i;@;	"scale_xo; 	;"scale-y;i;@;	"scale_yo; 	;"scale-z;i;@;	"scale_z;i;@:@separator:
spaceo;;["/* rotate */;i$;0;	@;
[ ;i u;%{[o:Sass::Script::Variable	:
@name"rotate-x:
@linei%:@options{ :@underscored_name"rotate_x0[o:Sass::Tree::VariableNode;"
trans;i%;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i%;@;	"
transo:Sass::Script::Funcall
;"rotateX:@keywords{ ;i%;@:
@args[o; 	;"rotate-x;i%;@;	"rotate_x;i%;@:@separator:
spaceu;%{[o:Sass::Script::Variable	:
@name"rotate-y:
@linei&:@options{ :@underscored_name"rotate_y0[o:Sass::Tree::VariableNode;"
trans;i&;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i&;@;	"
transo:Sass::Script::Funcall
;"rotateY:@keywords{ ;i&;@:
@args[o; 	;"rotate-y;i&;@;	"rotate_y;i&;@:@separator:
spaceu;%{[o:Sass::Script::Variable	:
@name"rotate-z:
@linei':@options{ :@underscored_name"rotate_z0[o:Sass::Tree::VariableNode;"
trans;i';@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i';@;	"
transo:Sass::Script::Funcall
;"rotateZ:@keywords{ ;i';@:
@args[o; 	;"rotate-z;i';@;	"rotate_z;i';@:@separator:
spaceu;%|[o:Sass::Script::Variable	:
@name"rotate3d:
@linei(:@options{ :@underscored_name"rotate3d0[o:Sass::Tree::VariableNode;"
trans;i(;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i(;@;	"
transo:Sass::Script::Funcall
;"rotate3d:@keywords{ ;i(;@:
@args[o; 	;"rotate3d;i(;@;	"rotate3d;i(;@:@separator:
spaceo;;["/* translate */;i*;0;	@;
[ ;i u;%Þ[o:Sass::Script::Operation
:@operator:and:
@linei+:@options{ :@operand2o:Sass::Script::Variable	:
@name"trans-y;i+;	@:@underscored_name"trans_y:@operand1o;	;"trans-x;i+;	@;"trans_xu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@name"trans-x:
@linei/:@options{ :@underscored_name"trans_x0[o:Sass::Tree::VariableNode;"
trans;i/;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i/;@;	"
transo:Sass::Script::Funcall
;"translateX:@keywords{ ;i/;@:
@args[o; 	;"trans-x;i/;@;	"trans_x;i/;@:@separator:
spaceu; z[o:Sass::Script::Variable	:
@name"trans-y:
@linei0:@options{ :@underscored_name"trans_y0[o:Sass::Tree::VariableNode;"
trans;i0;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i0;@;	"
transo:Sass::Script::Funcall
;"translateY:@keywords{ ;i0;@:
@args[o; 	;"trans-y;i0;@;	"trans_y;i0;@:@separator:
spaceu; z[o:Sass::Script::Variable	:
@name"trans-z:
@linei1:@options{ :@underscored_name"trans_z0[o:Sass::Tree::VariableNode;"
trans;i1;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i1;@;	"
transo:Sass::Script::Funcall
;"translateZ:@keywords{ ;i1;@:
@args[o; 	;"trans-z;i1;@;	"trans_z;i1;@:@separator:
space[u;T[o:Sass::Script::Variable	:
@name"trans-z:
@linei,:@options{ :@underscored_name"trans_zu:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:
@name"
trans:
@linei-:@options{ :@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	;"
trans;i-;@	:@underscored_name"
transo:Sass::Script::Funcall
;"translate:@keywords{ ;i-;@	:
@args[o;	;"trans-x;i-;@	;"trans_xo;	;"trans-y;i-;@	;"trans_y;i-;@	:@separator:
space[o:Sass::Tree::VariableNode;"
trans;i,;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i,;@;	"
transo:Sass::Script::Funcall
;"translate3d:@keywords{ ;i,;@:
@args[o; 	;"trans-x;i,;@;	"trans_xo; 	;"trans-y;i,;@;	"trans_yo; 	;"trans-z;i,;@;	"trans_z;i,;@:@separator:
spaceo;;["/* skew */;i4;0;	@;
[ ;i u;%[o:Sass::Script::Operation
:@operator:and:
@linei5:@options{ :@operand2o:Sass::Script::Variable	:
@name"skew-y;i5;	@:@underscored_name"skew_y:@operand1o;	;"skew-x;i5;	@;"skew_xu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@name"skew-x:
@linei7:@options{ :@underscored_name"skew_x0[o:Sass::Tree::VariableNode;"
trans;i7;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i7;@;	"
transo:Sass::Script::Funcall
;"
skewX:@keywords{ ;i7;@:
@args[o; 	;"skew-x;i7;@;	"skew_x;i7;@:@separator:
spaceu; q[o:Sass::Script::Variable	:
@name"skew-y:
@linei8:@options{ :@underscored_name"skew_y0[o:Sass::Tree::VariableNode;"
trans;i8;@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;i8;@;	"
transo:Sass::Script::Funcall
;"
skewY:@keywords{ ;i8;@:
@args[o; 	;"skew-y;i8;@;	"skew_y;i8;@:@separator:
space[o:Sass::Tree::VariableNode;"
trans;i5;	@:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o;	;"
trans;i5;	@;"
transo:Sass::Script::Funcall
;"	skew:@keywords{ ;i5;	@:
@args[o;	;"skew-x;i5;	@;"skew_xo;	;"skew-y;i5;	@;"skew_y;i5;	@:@separator:
spaceo;;["/* apply it! */;i;;0;	@;
[ ;i o;*;"transform;#{ ;i<;	@;
[ ;$[o;	;"
trans;i<;	@;"
transo;	;"only3d;i<;	@;"only3do;*;"transform-origin;#{ ;i=;	@;
[ ;$[	o;	;"origin-x;i=;	@;"origin_xo;	;"origin-y;i=;	@;"origin_yo;	;"origin-z;i=;	@;"origin_zo;	;"only3d;i=;	@;"only3d;$[[o;;"perspective;	@;"perspectiveo;);F;i;	@[o;;"scale-x;	@;"scale_xo;);F;i;	@[o;;"scale-y;	@;"scale_yo;);F;i;	@[o;;"scale-z;	@;"scale_zo;);F;i;	@[o;;"rotate-x;	@;"rotate_xo;);F;i;	@[o;;"rotate-y;	@;"rotate_yo;);F;i;	@[o;;"rotate-z;	@;"rotate_zo;);F;i	;	@[o;;"rotate3d;	@;"rotate3do;);F;i
;	@[o;;"trans-x;	@;"trans_xo;);F;i;	@[o;;"trans-y;	@;"trans_yo;);F;i;	@[o;;"trans-z;	@;"trans_zo;);F;i;	@[o;;"skew-x;	@;"skew_xo;);F;i;	@[o;;"skew-y;	@;"skew_yo;);F;i;	@[o;;"origin-x;	@;"origin_xo;);F;i;	@[o;;"origin-y;	@;"origin_yo;);F;i;	@[o;;"origin-z;	@;"origin_zo;);F;i;	@[o;;"only3d;	@;"only3do;);F;i;	@o;;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;iA;0;	@;
[ ;i o;;T;"simple-transform;iL;	@;
[o;*;"create-transform;#{ ;iU;	@;
[ ;$[o;);F;iN;	@o;	;"
scale;iO;	@;"
scaleo;	;"
scale;iO;	@;"
scaleo;);F;iO;	@o;);F;iP;	@o;);F;iP;	@o;	;"rotate;iP;	@;"rotateo;);F;iP;	@o;	;"trans-x;iQ;	@;"trans_xo;	;"trans-y;iQ;	@;"trans_yo;);F;iQ;	@o;	;"skew-x;iR;	@;"skew_xo;	;"skew-y;iR;	@;"skew_yo;	;"origin-x;iS;	@;"origin_xo;	;"origin-y;iS;	@;"origin_yo;);F;iS;	@o;);F;iT;	@;$[[o;;"
scale;	@;"
scaleo;);F;iD;	@[o;;"rotate;	@;"rotateo;);F;iE;	@[o;;"trans-x;	@;"trans_xo;);F;iF;	@[o;;"trans-y;	@;"trans_yo;);F;iG;	@[o;;"skew-x;	@;"skew_xo;);F;iH;	@[o;;"skew-y;	@;"skew_yo;);F;iI;	@[o;;"origin-x;	@;"origin_xo;);F;iJ;	@[o;;"origin-y;	@;"origin_yo;);F;iK;	@