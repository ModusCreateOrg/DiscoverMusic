3.1.10 (Brainy Betty)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:@has_childrenT:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:
@linei:@options{ :@children[io:Sass::Tree::ImportNode
;0;i;	@:@imported_filename"shared;
[ o:Sass::Tree::CommentNode:@value["/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */;i:
@loud0;	@;
[ :@silenti o;;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;i;0;	@;
[ ;i o;;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;i;0;	@;
[ ;i o;;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;i ;0;	@;
[ ;i o;;["a/* Defaults ------------------------------------------------------------------
 * @doc on */;i4;0;	@;
[ ;i o;;["./* The default x-origin for transforms */;i7;0;	@;
[ ;i o:Sass::Tree::VariableNode:
@name"default-origin-x;i8;	@:@guarded"!default;
[ :
@expro:Sass::Script::Number:@numerator_units["%;i7;i8;	@:@original"50%:@denominator_units[ o;;["./* The default y-origin for transforms */;i9;0;	@;
[ ;i o;;"default-origin-y;i:;	@;"!default;
[ ;o;;["%;i7;i:;	@;"50%;[ o;;["./* The default z-origin for transforms */;i;;0;	@;
[ ;i o;;"default-origin-z;i<;	@;"!default;
[ ;o;;["%;i7;i<;	@;"50%;[ o;;["//* The default x-multiplier for scaling */;i?;0;	@;
[ ;i o;;"default-scale-x;i@;	@;"!default;
[ ;o;;[ ;f	1.25;i@;	@;"	1.25;[ o;;["//* The default y-multiplier for scaling */;iA;0;	@;
[ ;i o;;"default-scale-y;iB;	@;"!default;
[ ;o:Sass::Script::Variable	:@underscored_name"default_scale_x;"default-scale-x;iB;	@o;;["//* The default z-multiplier for scaling */;iC;0;	@;
[ ;i o;;"default-scale-z;iD;	@;"!default;
[ ;o;	;"default_scale_x;"default-scale-x;iD;	@o;;["*/* The default angle for rotations */;iG;0;	@;
[ ;i o;;"default-rotate;iH;	@;"!default;
[ ;o;;["deg;i2;iH;	@;"
45deg;[ o;;["</* The default x-vector for the axis of 3d rotations */;iK;0;	@;
[ ;i o;;"default-vector-x;iL;	@;"!default;
[ ;o;;[ ;i;iL;	@;"1;@So;;["</* The default y-vector for the axis of 3d rotations */;iM;0;	@;
[ ;i o;;"default-vector-y;iN;	@;"!default;
[ ;o;;[ ;i;iN;	@;"1;@So;;["</* The default z-vector for the axis of 3d rotations */;iO;0;	@;
[ ;i o;;"default-vector-z;iP;	@;"!default;
[ ;o;;[ ;i;iP;	@;"1;@So;;["0/* The default x-length for translations */;iS;0;	@;
[ ;i o;;"default-translate-x;iT;	@;"!default;
[ ;o;;["em;i;iT;	@;"1em;[ o;;["0/* The default y-length for translations */;iU;0;	@;
[ ;i o;;"default-translate-y;iV;	@;"!default;
[ ;o;	;"default_translate_x;"default-translate-x;iV;	@o;;["0/* The default z-length for translations */;iW;0;	@;
[ ;i o;;"default-translate-z;iX;	@;"!default;
[ ;o;	;"default_translate_x;"default-translate-x;iX;	@o;;["*/* The default x-angle for skewing */;i[;0;	@;
[ ;i o;;"default-skew-x;i\;	@;"!default;
[ ;o;;["deg;i
;i\;	@;"	5deg;[ o;;["*/* The default y-angle for skewing */;i];0;	@;
[ ;i o;;"default-skew-y;i^;	@;"!default;
[ ;o;;["deg;i
;i^;	@;"	5deg;[ o;;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;ia;0;	@;
[ ;i o:Sass::Tree::MixinDefNode;T;"apply-origin;il;	@;
[o;;"only3d;im;	@;0;
[ ;o:Sass::Script::Operation
:@operand2o;
;o;;[ ;i;im;	@;"2;@S;im:@operator:gt;	@:@operand1o:Sass::Script::Funcall
;"-compass-list-size;im:@keywords{ ;	@:
@args[o;!
;"-compass-list;im;"{ ;	@;#[o;	;"origin;"origin;im;	@;im;:or;	@; o;	;"only3d;"only3d;im;	@u:Sass::Tree::IfNode [o:Sass::Script::Variable	:@underscored_name"only3d:
@name"only3d:
@linein:@options{ u:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@name"experimental:
@lineiu:@keywords{ :@options{ :@children[ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform-origin;is;	@
o:Sass::Script::Variable	:@underscored_name"origin;"origin;is;	@
o;	;;;"	-moz;it;	@
o;	;;;"-webkit;it;	@
o;	;;;"-o;it;	@
o;	;;;"-ms;it;	@
o:!Sass::Script::UnaryOperation	:@operando;	;;;"-khtml;it;	@
;it:@operator:not;	@
o;	;;;"official;it;	@
[o:Sass::Tree::MixinNode;"experimental;iq:@keywords{ ;	@	:@children[ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform-origin;io;	@	o; 	;"origin;"origin;io;	@	o:!Sass::Script::UnaryOperation	:@operando;	;;;"	-moz;ip;	@	;ip:@operator:not;	@	o;	;;;"-webkit;ip;	@	o;	;o;	;;;"-o;ip;	@	;ip;;;	@	o;	;o;	;;;"-ms;ip;	@	;ip;;;	@	o;	;o;	;;;"-khtml;ip;	@	;ip;;;	@	o;	;;;"official;ip;	@	;#[[o;;"origin;"origin;	@0[o;;"only3d;"only3d;	@0o;;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;iy;0;	@;
[ ;i o;;T;"transform-origin;i;	@;
[o;;"origin;i;	@;0;
[ ;o;!
;"unquote;i;"{ ;	@;#[o:Sass::Script::String	:
@type:string;" ;i;	@u;%[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:@underscored_name"origin_z:
@name"origin-z:
@linei:@options{ ;
i:@operator:or;@
:@operand1o; 
;o;	;"origin_y;	"origin-y;
i;@
;
i;;;@
;o;	;"origin_x;	"origin-x;
i;@
0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:@underscored_name"origin_x:
@name"origin-x:
@linei:@options{ u:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:
@name"origin:
@linei:@options{ :@guarded0:@children[ :
@expro:Sass::Script::Number:@numerator_units["%:@valuei7;i;@	:@original"50%:@denominator_units[ [o:Sass::Tree::VariableNode;"origin;i;	@	:@guarded0:@children[ :
@expro; 	;"origin_x;"origin-x;i;	@	u;Þ[o:Sass::Script::Variable	:@underscored_name"origin_y:
@name"origin-y:
@linei:@options{ u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:@underscored_name"origin_z:
@name"origin-z:
@linei:@options{ 0[o:Sass::Tree::VariableNode;"origin;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"origin;"origin;i;	@	o:Sass::Script::Number:@numerator_units["%;i7;i;	@	:@original"50%:@denominator_units[ ;i;	@	:@separator:
space[o:Sass::Tree::VariableNode;"origin;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"origin;"origin;i;	@	o; 	;"origin_y;"origin-y;i;	@	;i;	@	:@separator:
spaceu;5[o:Sass::Script::Variable	:@underscored_name"origin_z:
@name"origin-z:
@linei:@options{ 0[o:Sass::Tree::VariableNode;"origin;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"origin;"origin;i;	@	o; 	;"origin_z;"origin-z;i;	@	;i;	@	:@separator:
spaceo:Sass::Tree::MixinNode;	"apply-origin;
i:@keywords{ ;@
:@children[ :
@args[o;	;"origin;	"origin;
i;@
o;	;"only3d;	"only3d;
i;@
;#[	[o;;"origin_x;"origin-x;	@o;	;"default_origin_x;"default-origin-x;i|;	@[o;;"origin_y;"origin-y;	@o;	;"default_origin_y;"default-origin-y;i};	@[o;;"origin_z;"origin-z;	@o:Sass::Script::Bool;F;i~;	@[o;;"only3d;"only3d;	@o;!
;"if;i;"{ ;	@;#[o;	;"origin_z;"origin-z;i;	@o;);T;i;	@o;);F;i;	@o;;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;i;0;	@;
[ ;i o;;T;"transform;i;	@;
[u;%6[o:Sass::Script::Variable	:@underscored_name"only3d:
@name"only3d:
@linei:@options{ u:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@name"experimental:
@linei:@keywords{ :@options{ :@children[ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform;i;	@
o:Sass::Script::Variable	:@underscored_name"transform;"transform;i;	@
o;	;;;"	-moz;i;	@
o;	;;;"-webkit;i;	@
o;	;;;"-o;i;	@
o;	;;;"-ms;i;	@
o:!Sass::Script::UnaryOperation	:@operando;	;;;"-khtml;i;	@
;i:@operator:not;	@
o;	;;;"official;i;	@
[o:Sass::Tree::MixinNode;"experimental;i:@keywords{ ;	@	:@children[ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform;i;	@	o; 	;"transform;"transform;i;	@	o:!Sass::Script::UnaryOperation	:@operando;	;;;"	-moz;i;	@	;i:@operator:not;	@	o;	;;;"-webkit;i;	@	o;	;o;	;;;"-o;i;	@	;i;;;	@	o;	;o;	;;;"-ms;i;	@	;i;;;	@	o;	;o;	;;;"-khtml;i;	@	;i;;;	@	o;	;;;"official;i;	@	;#[[o;;"transform;"transform;	@0[o;;"only3d;"only3d;	@o;);F;i;	@o;;["D/* Shortcut to target all browsers with 2D transform support */;i;0;	@;
[ ;i o;;T;"transform2d;i ;	@;
[o:Sass::Tree::MixinNode;"transform;i¡;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i¡;	@o;);F;i¡;	@;#[[o;;"
trans;"
trans;	@0o;;["E/* Shortcut to target only browsers with 3D transform support */;i¤;0;	@;
[ ;i o;;T;"transform3d;i¥;	@;
[o;*;"transform;i¦;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i¦;	@o;);T;i¦;	@;#[[o;;"
trans;"
trans;	@0o;;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;i©;0;	@;
[ ;i o;;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;i­;0;	@;
[ ;i o;;T;"perspective;i´;	@;
[o;*;"experimental;i·;"{ ;	@;
[ ;#[o;&	;':identifier;"perspective;iµ;	@o;	;"p;"p;iµ;	@o:!Sass::Script::UnaryOperation	:@operando;&	;';+;"	-moz;i¶;	@;i¶;:not;	@o;&	;';+;"-webkit;i¶;	@o;,	;-o;&	;';+;"-o;i¶;	@;i¶;;.;	@o;,	;-o;&	;';+;"-ms;i¶;	@;i¶;;.;	@o;,	;-o;&	;';+;"-khtml;i¶;	@;i¶;;.;	@o;&	;';+;"official;i¶;	@;#[[o;;"p;"p;	@0o;;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;iº;0;	@;
[ ;i o;;T;"perspective-origin;i¿;	@;
[o;*;"experimental;iÂ;"{ ;	@;
[ ;#[o;&	;';+;"perspective-origin;iÀ;	@o;	;"origin;"origin;iÀ;	@o;,	;-o;&	;';+;"	-moz;iÁ;	@;iÁ;;.;	@o;&	;';+;"-webkit;iÁ;	@o;,	;-o;&	;';+;"-o;iÁ;	@;iÁ;;.;	@o;,	;-o;&	;';+;"-ms;iÁ;	@;iÁ;;.;	@o;,	;-o;&	;';+;"-khtml;iÁ;	@;iÁ;;.;	@o;&	;';+;"official;iÁ;	@;#[[o;;"origin;"origin;	@o;;["%;i7;i¿;	@;"50%;[ o;;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;iÅ;0;	@;
[ ;i o;;T;"transform-style;iË;	@;
[o;*;"experimental;iÎ;"{ ;	@;
[ ;#[o;&	;';+;"transform-style;iÌ;	@o;	;"
style;"
style;iÌ;	@o;,	;-o;&	;';+;"	-moz;iÍ;	@;iÍ;;.;	@o;&	;';+;"-webkit;iÍ;	@o;,	;-o;&	;';+;"-o;iÍ;	@;iÍ;;.;	@o;,	;-o;&	;';+;"-ms;iÍ;	@;iÍ;;.;	@o;,	;-o;&	;';+;"-khtml;iÍ;	@;iÍ;;.;	@o;&	;';+;"official;iÍ;	@;#[[o;;"
style;"
style;	@o;&	;';+;"preserve-3d;iË;	@o;;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;iÑ;0;	@;
[ ;i o;;T;"backface-visibility;i×;	@;
[o;*;"experimental;iÚ;"{ ;	@;
[ ;#[o;&	;';+;"backface-visibility;iØ;	@o;	;"visibility;"visibility;iØ;	@o;,	;-o;&	;';+;"	-moz;iÙ;	@;iÙ;;.;	@o;&	;';+;"-webkit;iÙ;	@o;,	;-o;&	;';+;"-o;iÙ;	@;iÙ;;.;	@o;,	;-o;&	;';+;"-ms;iÙ;	@;iÙ;;.;	@o;,	;-o;&	;';+;"-khtml;iÙ;	@;iÙ;;.;	@o;&	;';+;"official;iÙ;	@;#[[o;;"visibility;"visibility;	@o;&	;';+;"hidden;i×;	@o;;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;iÝ;0;	@;
[ ;i o;;["a/* Scale ---------------------------------------------------------------------
 * @doc on */;iä;0;	@;
[ ;i o;;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iç;0;	@;
[ ;i o;;T;"
scale;iõ;	@;
[o;;"
trans;iö;	@;0;
[ ;o;!
;"
scale;iö;"{ ;	@;#[o;	;"scale_x;"scale-x;iö;	@o;	;"scale_y;"scale-y;iö;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@linei÷:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i÷;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i÷:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;i÷;	@	o; 	;"
trans;"
trans;i÷;	@	;i÷;	@	:@separator:
spaceo;*;"transform;iø;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;iø;	@o;	;"only3d;"only3d;iø;	@;#[	[o;;"scale_x;"scale-x;	@o;	;"default_scale_x;"default-scale-x;iñ;	@[o;;"scale_y;"scale-y;	@o;	;"scale_x;"scale-x;iò;	@[o;;"perspective;"perspective;	@o;);F;ió;	@[o;;"only3d;"only3d;	@o;);F;iô;	@o;;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iû;0;	@;
[ ;i o;;T;"scaleX;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;!
;"scaleX;i;"{ ;	@;#[o;	;"
scale;"
scale;i;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;i;	@	o; 	;"
trans;"
trans;i;	@	;i;	@	:@separator:
spaceo;*;"transform;i;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i;	@o;	;"only3d;"only3d;i;	@;#[[o;;"
scale;"
scale;	@o;	;"default_scale_x;"default-scale-x;i ;	@[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i	;0;	@;
[ ;i o;;T;"scaleY;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;!
;"scaleY;i;"{ ;	@;#[o;	;"
scale;"
scale;i;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;i;	@	o; 	;"
trans;"
trans;i;	@	;i;	@	:@separator:
spaceo;*;"transform;i;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i;	@o;	;"only3d;"only3d;i;	@;#[[o;;"
scale;"
scale;	@o;	;"default_scale_y;"default-scale-y;i;	@[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;0;	@;
[ ;i o;;T;"scaleZ;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;!
;"scaleZ;i;"{ ;	@;#[o;	;"
scale;"
scale;i;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@linei :@options{ 0[o:Sass::Tree::VariableNode;"
trans;i ;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i :@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;i ;	@	o; 	;"
trans;"
trans;i ;	@	;i ;	@	:@separator:
spaceo;*;"transform3d;i!;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i!;	@;#[[o;;"
scale;"
scale;	@o;	;"default_scale_z;"default-scale-z;i;	@[o;;"perspective;"perspective;	@o;);F;i;	@o;;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i$;0;	@;
[ ;i o;;T;"scale3d;i-;	@;
[o;;"
trans;i.;	@;0;
[ ;o;!
;"scale3d;i.;"{ ;	@;#[o;	;"scale_x;"scale-x;i.;	@o;	;"scale_y;"scale-y;i.;	@o;	;"scale_z;"scale-z;i.;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@linei/:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i/;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i/:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;i/;	@	o; 	;"
trans;"
trans;i/;	@	;i/;	@	:@separator:
spaceo;*;"transform3d;i0;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i0;	@;#[	[o;;"scale_x;"scale-x;	@o;	;"default_scale_x;"default-scale-x;i);	@[o;;"scale_y;"scale-y;	@o;	;"default_scale_y;"default-scale-y;i*;	@[o;;"scale_z;"scale-z;	@o;	;"default_scale_z;"default-scale-z;i+;	@[o;;"perspective;"perspective;	@o;);F;i,;	@o;;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;i3;0;	@;
[ ;i o;;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i7;0;	@;
[ ;i o;;T;"rotate;i@;	@;
[o;;"
trans;iA;	@;0;
[ ;o;!
;"rotate;iA;"{ ;	@;#[o;	;"rotate;"rotate;iA;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@lineiB:@options{ 0[o:Sass::Tree::VariableNode;"
trans;iB;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iB:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;iB;	@	o; 	;"
trans;"
trans;iB;	@	;iB;	@	:@separator:
spaceo;*;"transform;iC;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;iC;	@o;	;"only3d;"only3d;iC;	@;#[[o;;"rotate;"rotate;	@o;	;"default_rotate;"default-rotate;i=;	@[o;;"perspective;"perspective;	@o;);F;i>;	@[o;;"only3d;"only3d;	@o;);F;i?;	@o;;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iF;0;	@;
[ ;i o;;T;"rotateZ;iM;	@;
[o;*;"rotate;iN;"{ ;	@;
[ ;#[o;	;"rotate;"rotate;iN;	@o;	;"perspective;"perspective;iN;	@o;	;"only3d;"only3d;iN;	@;#[[o;;"rotate;"rotate;	@o;	;"default_rotate;"default-rotate;iJ;	@[o;;"perspective;"perspective;	@o;);F;iK;	@[o;;"only3d;"only3d;	@o;);F;iL;	@o;;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iQ;0;	@;
[ ;i o;;T;"rotateX;iX;	@;
[o;;"
trans;iY;	@;0;
[ ;o;!
;"rotateX;iY;"{ ;	@;#[o;	;"rotate;"rotate;iY;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@lineiZ:@options{ 0[o:Sass::Tree::VariableNode;"
trans;iZ;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iZ:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;iZ;	@	o; 	;"
trans;"
trans;iZ;	@	;iZ;	@	:@separator:
spaceo;*;"transform3d;i[;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i[;	@;#[[o;;"rotate;"rotate;	@o;	;"default_rotate;"default-rotate;iV;	@[o;;"perspective;"perspective;	@o;);F;iW;	@o;;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i^;0;	@;
[ ;i o;;T;"rotateY;ie;	@;
[o;;"
trans;if;	@;0;
[ ;o;!
;"rotateY;if;"{ ;	@;#[o;	;"rotate;"rotate;if;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@lineig:@options{ 0[o:Sass::Tree::VariableNode;"
trans;ig;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;ig:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;ig;	@	o; 	;"
trans;"
trans;ig;	@	;ig;	@	:@separator:
spaceo;*;"transform3d;ih;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;ih;	@;#[[o;;"rotate;"rotate;	@o;	;"default_rotate;"default-rotate;ic;	@[o;;"perspective;"perspective;	@o;);F;id;	@o;;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ik;0;	@;
[ ;i o;;T;"rotate3d;ix;	@;
[o;;"
trans;iy;	@;0;
[ ;o;!
;"rotate3d;iy;"{ ;	@;#[	o;	;"vector_x;"vector-x;iy;	@o;	;"vector_y;"vector-y;iy;	@o;	;"vector_z;"vector-z;iy;	@o;	;"rotate;"rotate;iy;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@lineiz:@options{ 0[o:Sass::Tree::VariableNode;"
trans;iz;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iz:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;iz;	@	o; 	;"
trans;"
trans;iz;	@	;iz;	@	:@separator:
spaceo;*;"transform3d;i{;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i{;	@;#[
[o;;"vector_x;"vector-x;	@o;	;"default_vector_x;"default-vector-x;is;	@[o;;"vector_y;"vector-y;	@o;	;"default_vector_y;"default-vector-y;it;	@[o;;"vector_z;"vector-z;	@o;	;"default_vector_z;"default-vector-z;iu;	@[o;;"rotate;"rotate;	@o;	;"default_rotate;"default-rotate;iv;	@[o;;"perspective;"perspective;	@o;);F;iw;	@o;;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;i~;0;	@;
[ ;i o;;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;0;	@;
[ ;i o;;T;"translate;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;!
;"translate;i;"{ ;	@;#[o;	;"translate_x;"translate-x;i;	@o;	;"translate_y;"translate-y;i;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;i;	@	o; 	;"
trans;"
trans;i;	@	;i;	@	:@separator:
spaceo;*;"transform;i;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i;	@o;	;"only3d;"only3d;i;	@;#[	[o;;"translate_x;"translate-x;	@o;	;"default_translate_x;"default-translate-x;i;	@[o;;"translate_y;"translate-y;	@o;	;"default_translate_y;"default-translate-y;i;	@[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;0;	@;
[ ;i o;;T;"translateX;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;!
;"translateX;i;"{ ;	@;#[o;	;"trans_x;"trans-x;i;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;i;	@	o; 	;"
trans;"
trans;i;	@	;i;	@	:@separator:
spaceo;*;"transform;i;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i;	@o;	;"only3d;"only3d;i;	@;#[[o;;"trans_x;"trans-x;	@o;	;"default_translate_x;"default-translate-x;i;	@[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;0;	@;
[ ;i o;;T;"translateY;i¨;	@;
[o;;"
trans;i©;	@;0;
[ ;o;!
;"translateY;i©;"{ ;	@;#[o;	;"trans_y;"trans-y;i©;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@lineiª:@options{ 0[o:Sass::Tree::VariableNode;"
trans;iª;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iª:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;iª;	@	o; 	;"
trans;"
trans;iª;	@	;iª;	@	:@separator:
spaceo;*;"transform;i«;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i«;	@o;	;"only3d;"only3d;i«;	@;#[[o;;"trans_y;"trans-y;	@o;	;"default_translate_y;"default-translate-y;i¥;	@[o;;"perspective;"perspective;	@o;);F;i¦;	@[o;;"only3d;"only3d;	@o;);F;i§;	@o;;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i®;0;	@;
[ ;i o;;T;"translateZ;iµ;	@;
[o;;"
trans;i¶;	@;0;
[ ;o;!
;"translateZ;i¶;"{ ;	@;#[o;	;"trans_z;"trans-z;i¶;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@linei·:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i·;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i·:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;i·;	@	o; 	;"
trans;"
trans;i·;	@	;i·;	@	:@separator:
spaceo;*;"transform3d;i¸;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i¸;	@;#[[o;;"trans_z;"trans-z;	@o;	;"default_translate_z;"default-translate-z;i³;	@[o;;"perspective;"perspective;	@o;);F;i´;	@o;;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i»;0;	@;
[ ;i o;;T;"translate3d;iÄ;	@;
[o;;"
trans;iÅ;	@;0;
[ ;o;!
;"translate3d;iÅ;"{ ;	@;#[o;	;"translate_x;"translate-x;iÅ;	@o;	;"translate_y;"translate-y;iÅ;	@o;	;"translate_z;"translate-z;iÅ;	@u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@lineiÆ:@options{ 0[o:Sass::Tree::VariableNode;"
trans;iÆ;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iÆ:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;iÆ;	@	o; 	;"
trans;"
trans;iÆ;	@	;iÆ;	@	:@separator:
spaceo;*;"transform3d;iÇ;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;iÇ;	@;#[	[o;;"translate_x;"translate-x;	@o;	;"default_translate_x;"default-translate-x;iÀ;	@[o;;"translate_y;"translate-y;	@o;	;"default_translate_y;"default-translate-y;iÁ;	@[o;;"translate_z;"translate-z;	@o;	;"default_translate_z;"default-translate-z;iÂ;	@[o;;"perspective;"perspective;	@o;);F;iÃ;	@o;;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;iÊ;0;	@;
[ ;i o;;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÎ;0;	@;
[ ;i o;;T;"	skew;iÙ;	@;
[o;;"
trans;iÚ;	@;0;
[ ;o;!
;"	skew;iÚ;"{ ;	@;#[o;	;"skew_x;"skew-x;iÚ;	@o;	;"skew_y;"skew-y;iÚ;	@o;*;"transform;iÛ;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;iÛ;	@o;	;"only3d;"only3d;iÛ;	@;#[[o;;"skew_x;"skew-x;	@o;	;"default_skew_x;"default-skew-x;iÖ;	@[o;;"skew_y;"skew-y;	@o;	;"default_skew_y;"default-skew-y;i×;	@[o;;"only3d;"only3d;	@o;);F;iØ;	@o;;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÞ;0;	@;
[ ;i o;;T;"
skewX;iæ;	@;
[o;;"
trans;iç;	@;0;
[ ;o;!
;"
skewX;iç;"{ ;	@;#[o;	;"skew_x;"skew-x;iç;	@o;*;"transform;iè;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;iè;	@o;	;"only3d;"only3d;iè;	@;#[[o;;"skew_x;"skew-x;	@o;	;"default_skew_x;"default-skew-x;iä;	@[o;;"only3d;"only3d;	@o;);F;iå;	@o;;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ië;0;	@;
[ ;i o;;T;"
skewY;ió;	@;
[o;;"
trans;iô;	@;0;
[ ;o;!
;"
skewY;iô;"{ ;	@;#[o;	;"skew_y;"skew-y;iô;	@o;*;"transform;iõ;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;iõ;	@o;	;"only3d;"only3d;iõ;	@;#[[o;;"skew_y;"skew-y;	@o;	;"default_skew_y;"default-skew-y;iñ;	@[o;;"only3d;"only3d;	@o;);F;iò;	@o;;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iù;0;	@;
[ ;i o;;T;"create-transform;i;	@;
[o;;"
trans;i;	@;0;
[ ;o;!
;"unquote;i;"{ ;	@;#[o;&	;';(;" ;i;	@o;;["/* perspective */;i;0;	@;
[ ;i u;%.[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::Funcall
;"perspective;i:@keywords{ ;	@	:
@args[o; 	;"perspective;"perspective;i;	@	o;;["/* scale */;i;0;	@;
[ ;i u;%Ê[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:@underscored_name"scale_y:
@name"scale-y:
@linei:@options{ ;
i:@operator:and;@
:@operand1o;	;"scale_x;	"scale-x;
i;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:@underscored_name"scale_x:
@name"scale-x:
@linei:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i;	@	o:Sass::Script::Funcall
;"scaleX;i:@keywords{ ;	@	:
@args[o; 	;"scale_x;"scale-x;i;	@	;i;	@	:@separator:
spaceu; v[o:Sass::Script::Variable	:@underscored_name"scale_y:
@name"scale-y:
@linei :@options{ 0[o:Sass::Tree::VariableNode;"
trans;i ;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i ;	@	o:Sass::Script::Funcall
;"scaleY;i :@keywords{ ;	@	:
@args[o; 	;"scale_y;"scale-y;i ;	@	;i ;	@	:@separator:
spaceu; v[o:Sass::Script::Variable	:@underscored_name"scale_z:
@name"scale-z:
@linei!:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i!;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i!;	@	o:Sass::Script::Funcall
;"scaleZ;i!:@keywords{ ;	@	:
@args[o; 	;"scale_z;"scale-z;i!;	@	;i!;	@	:@separator:
space[u;L[o:Sass::Script::Variable	:@underscored_name"scale_z:
@name"scale-z:
@linei:@options{ u:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:
@name"
trans:
@linei:@options{ :@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	:@underscored_name"
trans;"
trans;i;@	o:Sass::Script::Funcall
;"
scale;i:@keywords{ ;@	:
@args[o;	;"scale_x;"scale-x;i;@	o;	;"scale_y;"scale-y;i;@	;i;@	:@separator:
space[o:Sass::Tree::VariableNode;"
trans;i;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i;	@	o:Sass::Script::Funcall
;"scale3d;i:@keywords{ ;	@	:
@args[o; 	;"scale_x;"scale-x;i;	@	o; 	;"scale_y;"scale-y;i;	@	o; 	;"scale_z;"scale-z;i;	@	;i;	@	:@separator:
spaceo;;["/* rotate */;i$;0;	@;
[ ;i u;%{[o:Sass::Script::Variable	:@underscored_name"rotate_x:
@name"rotate-x:
@linei%:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i%;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i%;	@	o:Sass::Script::Funcall
;"rotateX;i%:@keywords{ ;	@	:
@args[o; 	;"rotate_x;"rotate-x;i%;	@	;i%;	@	:@separator:
spaceu;%{[o:Sass::Script::Variable	:@underscored_name"rotate_y:
@name"rotate-y:
@linei&:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i&;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i&;	@	o:Sass::Script::Funcall
;"rotateY;i&:@keywords{ ;	@	:
@args[o; 	;"rotate_y;"rotate-y;i&;	@	;i&;	@	:@separator:
spaceu;%{[o:Sass::Script::Variable	:@underscored_name"rotate_z:
@name"rotate-z:
@linei':@options{ 0[o:Sass::Tree::VariableNode;"
trans;i';	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i';	@	o:Sass::Script::Funcall
;"rotateZ;i':@keywords{ ;	@	:
@args[o; 	;"rotate_z;"rotate-z;i';	@	;i';	@	:@separator:
spaceu;%|[o:Sass::Script::Variable	:@underscored_name"rotate3d:
@name"rotate3d:
@linei(:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i(;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i(;	@	o:Sass::Script::Funcall
;"rotate3d;i(:@keywords{ ;	@	:
@args[o; 	;"rotate3d;"rotate3d;i(;	@	;i(;	@	:@separator:
spaceo;;["/* translate */;i*;0;	@;
[ ;i u;%Þ[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:@underscored_name"trans_y:
@name"trans-y:
@linei+:@options{ ;
i+:@operator:and;@
:@operand1o;	;"trans_x;	"trans-x;
i+;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:@underscored_name"trans_x:
@name"trans-x:
@linei/:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i/;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i/;	@	o:Sass::Script::Funcall
;"translateX;i/:@keywords{ ;	@	:
@args[o; 	;"trans_x;"trans-x;i/;	@	;i/;	@	:@separator:
spaceu; z[o:Sass::Script::Variable	:@underscored_name"trans_y:
@name"trans-y:
@linei0:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i0;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i0;	@	o:Sass::Script::Funcall
;"translateY;i0:@keywords{ ;	@	:
@args[o; 	;"trans_y;"trans-y;i0;	@	;i0;	@	:@separator:
spaceu; z[o:Sass::Script::Variable	:@underscored_name"trans_z:
@name"trans-z:
@linei1:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i1;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i1;	@	o:Sass::Script::Funcall
;"translateZ;i1:@keywords{ ;	@	:
@args[o; 	;"trans_z;"trans-z;i1;	@	;i1;	@	:@separator:
space[u;T[o:Sass::Script::Variable	:@underscored_name"trans_z:
@name"trans-z:
@linei,:@options{ u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:
@name"
trans:
@linei-:@options{ :@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	:@underscored_name"
trans;"
trans;i-;@	o:Sass::Script::Funcall
;"translate;i-:@keywords{ ;@	:
@args[o;	;"trans_x;"trans-x;i-;@	o;	;"trans_y;"trans-y;i-;@	;i-;@	:@separator:
space[o:Sass::Tree::VariableNode;"
trans;i,;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i,;	@	o:Sass::Script::Funcall
;"translate3d;i,:@keywords{ ;	@	:
@args[o; 	;"trans_x;"trans-x;i,;	@	o; 	;"trans_y;"trans-y;i,;	@	o; 	;"trans_z;"trans-z;i,;	@	;i,;	@	:@separator:
spaceo;;["/* skew */;i4;0;	@;
[ ;i u;%[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:@underscored_name"skew_y:
@name"skew-y:
@linei5:@options{ ;
i5:@operator:and;@
:@operand1o;	;"skew_x;	"skew-x;
i5;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:@underscored_name"skew_x:
@name"skew-x:
@linei7:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i7;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i7;	@	o:Sass::Script::Funcall
;"
skewX;i7:@keywords{ ;	@	:
@args[o; 	;"skew_x;"skew-x;i7;	@	;i7;	@	:@separator:
spaceu; q[o:Sass::Script::Variable	:@underscored_name"skew_y:
@name"skew-y:
@linei8:@options{ 0[o:Sass::Tree::VariableNode;"
trans;i8;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i8;	@	o:Sass::Script::Funcall
;"
skewY;i8:@keywords{ ;	@	:
@args[o; 	;"skew_y;"skew-y;i8;	@	;i8;	@	:@separator:
space[o:Sass::Tree::VariableNode;	"
trans;
i5;@
:@guarded0:@children[ :
@expro:Sass::Script::List	:@value[o;	;"
trans;	"
trans;
i5;@
o:Sass::Script::Funcall
;	"	skew;
i5:@keywords{ ;@
:
@args[o;	;"skew_x;	"skew-x;
i5;@
o;	;"skew_y;	"skew-y;
i5;@
;
i5;@
:@separator:
spaceo;;["/* apply it! */;i;;0;	@;
[ ;i o;*;"transform;i<;"{ ;	@;
[ ;#[o;	;"
trans;"
trans;i<;	@o;	;"only3d;"only3d;i<;	@o;*;"transform-origin;i=;"{ ;	@;
[ ;#[	o;	;"origin_x;"origin-x;i=;	@o;	;"origin_y;"origin-y;i=;	@o;	;"origin_z;"origin-z;i=;	@o;	;"only3d;"only3d;i=;	@;#[[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"scale_x;"scale-x;	@o;);F;i;	@[o;;"scale_y;"scale-y;	@o;);F;i;	@[o;;"scale_z;"scale-z;	@o;);F;i;	@[o;;"rotate_x;"rotate-x;	@o;);F;i;	@[o;;"rotate_y;"rotate-y;	@o;);F;i;	@[o;;"rotate_z;"rotate-z;	@o;);F;i	;	@[o;;"rotate3d;"rotate3d;	@o;);F;i
;	@[o;;"trans_x;"trans-x;	@o;);F;i;	@[o;;"trans_y;"trans-y;	@o;);F;i;	@[o;;"trans_z;"trans-z;	@o;);F;i;	@[o;;"skew_x;"skew-x;	@o;);F;i;	@[o;;"skew_y;"skew-y;	@o;);F;i;	@[o;;"origin_x;"origin-x;	@o;);F;i;	@[o;;"origin_y;"origin-y;	@o;);F;i;	@[o;;"origin_z;"origin-z;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;iA;0;	@;
[ ;i o;;T;"simple-transform;iL;	@;
[o;*;"create-transform;iU;"{ ;	@;
[ ;#[o;);F;iN;	@o;	;"
scale;"
scale;iO;	@o;	;"
scale;"
scale;iO;	@o;);F;iO;	@o;);F;iP;	@o;);F;iP;	@o;	;"rotate;"rotate;iP;	@o;);F;iP;	@o;	;"trans_x;"trans-x;iQ;	@o;	;"trans_y;"trans-y;iQ;	@o;);F;iQ;	@o;	;"skew_x;"skew-x;iR;	@o;	;"skew_y;"skew-y;iR;	@o;	;"origin_x;"origin-x;iS;	@o;	;"origin_y;"origin-y;iS;	@o;);F;iS;	@o;);F;iT;	@;#[[o;;"
scale;"
scale;	@o;);F;iD;	@[o;;"rotate;"rotate;	@o;);F;iE;	@[o;;"trans_x;"trans-x;	@o;);F;iF;	@[o;;"trans_y;"trans-y;	@o;);F;iG;	@[o;;"skew_x;"skew-x;	@o;);F;iH;	@[o;;"skew_y;"skew-y;	@o;);F;iI;	@[o;;"origin_x;"origin-x;	@o;);F;iJ;	@[o;;"origin_y;"origin-y;	@o;);F;iK;	@